Testing:#
library(EMVSpackage)#
library(mvtnorm)#
#
n<-10#
p<-5#
beta<-c(1,2,3,rep(0,p-3))#
#
rho<-0.5#
Sig<-rho^abs(rep(1,p)%o%1:p-(1:p))#
sigma<-sqrt(3)#
#
X<-rmvnorm(n,numeric(p),Sig)#
Y<-X%*%beta+rnorm(n,0,sd=sigma)#
#
v0s<-seq(0.1,1,by=1)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)#
#
###############################################################
# ********* Beta-binomial prior *****************************##
#
# UNIT STARTING VALUES#
#
beta_init<-rep(1,p)#
source("/Users/ville/Desktop/EMVS/EMVS_code2 (2).R")#
result1<-EMVS2(Y,#
               X,#
               v0s=v0s,#
               v1=v1,#
               type="betabinomial",#
               sigma_init=1,#
               epsilon=10^-4,#
               p = 0.5,#
               beta_init = beta_init,#
               a=a,#
               b=b,#
               v1_g=v1_g)
result2 = EMVS(Y=Y[,1],#
  X=X,#
  v0s = v0s,#
  v1 = v1,#
  type = "betabinomial",#
  beta_init = beta_init,#
  sigma_init = 1,#
  epsilon  = 10^-4,#
  temperature = NULL,#
  Z = NULL,#
  mu = NULL,#
  Sigma = NULL,#
  p = 0.5,#
  a = a,#
  b = b,#
  a_v1 = NULL,#
  b_v1 = NULL,#
  v1_g = v1_g)
result1
Testing:#
library(EMVSpackage)#
library(mvtnorm)#
#
n<-10#
p<-5#
beta<-c(1,2,3,rep(0,p-3))#
#
rho<-0.5#
Sig<-rho^abs(rep(1,p)%o%1:p-(1:p))#
sigma<-sqrt(3)#
#
X<-rmvnorm(n,numeric(p),Sig)#
Y<-X%*%beta+rnorm(n,0,sd=sigma)#
#
v0s<-seq(0.1,1,by=1)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)#
#
###############################################################
# ********* Beta-binomial prior *****************************##
#
# UNIT STARTING VALUES#
#
beta_init<-rep(1,p)#
source("/Users/ville/Desktop/EMVS/EMVS_code2 (2).R")#
result1<-EMVS2(Y,#
               X,#
               v0s=v0s,#
               v1=v1,#
               type="betabinomial",#
               sigma_init=1,#
               epsilon=10^-4,#
               p = 0.5,#
               beta_init = beta_init,#
               a=a,#
               b=b,#
               v1_g=v1_g)
result2 = EMVS(Y=Y[,1],#
  X=X,#
  v0s = v0s,#
  v1 = v1,#
  type = "betabinomial",#
  beta_init = beta_init,#
  sigma_init = 1,#
  epsilon  = 10^-4,#
  temperature = NULL,#
  Z = NULL,#
  mu = NULL,#
  Sigma = NULL,#
  p = 0.5,#
  a = a,#
  b = b,#
  a_v1 = NULL,#
  b_v1 = NULL,#
  v1_g = v1_g)
Testing:#
library(EMVSpackage)#
library(mvtnorm)#
#
n<-10#
p<-5#
beta<-c(1,2,3,rep(0,p-3))#
#
rho<-0.5#
Sig<-rho^abs(rep(1,p)%o%1:p-(1:p))#
sigma<-sqrt(3)#
#
X<-rmvnorm(n,numeric(p),Sig)#
Y<-X%*%beta+rnorm(n,0,sd=sigma)#
#
v0s<-seq(0.1,1,by=1)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)#
#
###############################################################
# ********* Beta-binomial prior *****************************##
#
# UNIT STARTING VALUES#
#
beta_init<-rep(1,p)#
source("/Users/ville/Desktop/EMVS/EMVS_code2 (2).R")#
result1<-EMVS2(Y,#
               X,#
               v0s=v0s,#
               v1=v1,#
               type="betabinomial",#
               sigma_init=1,#
               epsilon=10^-4,#
               p = 0.5,#
               beta_init = beta_init,#
               a=a,#
               b=b,#
               v1_g=v1_g)
result2 = EMVS(Y=Y[,1],#
  X=X,#
  v0s = v0s,#
  v1 = v1,#
  type = "betabinomial",#
  beta_init = beta_init,#
  sigma_init = 1,#
  epsilon  = 10^-4,#
  temperature = NULL,#
  Z = NULL,#
  mu = NULL,#
  Sigma = NULL,#
  p = 0.5,#
  a = a,#
  b = b,#
  a_v1 = NULL,#
  b_v1 = NULL,#
  v1_g = v1_g)
Testing:#
library(EMVSpackage)#
library(mvtnorm)#
#
n<-10#
p<-5#
beta<-c(1,2,3,rep(0,p-3))#
#
rho<-0.5#
Sig<-rho^abs(rep(1,p)%o%1:p-(1:p))#
sigma<-sqrt(3)#
#
X<-rmvnorm(n,numeric(p),Sig)#
Y<-X%*%beta+rnorm(n,0,sd=sigma)#
#
v0s<-seq(0.1,1,by=1)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)#
#
###############################################################
# ********* Beta-binomial prior *****************************##
#
# UNIT STARTING VALUES#
#
beta_init<-rep(1,p)#
source("/Users/ville/Desktop/EMVS/EMVS_code2 (2).R")#
result1<-EMVS2(Y,#
               X,#
               v0s=v0s,#
               v1=v1,#
               type="betabinomial",#
               sigma_init=1,#
               epsilon=10^-4,#
               p = 0.5,#
               beta_init = beta_init,#
               a=a,#
               b=b,#
               v1_g=v1_g)
result2 = EMVS(Y=Y[,1],#
  X=X,#
  v0s = v0s,#
  v1 = v1,#
  type = "betabinomial",#
  beta_init = beta_init,#
  sigma_init = 1,#
  epsilon  = 10^-4,#
  temperature = NULL,#
  Z = NULL,#
  mu = NULL,#
  Sigma = NULL,#
  p = 0.5,#
  a = a,#
  b = b,#
  a_v1 = NULL,#
  b_v1 = NULL,#
  v1_g = v1_g)
result1
head(result1)
head(result2)
Testing:#
library(EMVSpackage)#
library(mvtnorm)#
#
n<-10000#
p<-500#
beta<-c(1,2,3,rep(0,p-3))#
#
rho<-0.5#
Sig<-rho^abs(rep(1,p)%o%1:p-(1:p))#
sigma<-sqrt(3)#
#
X<-rmvnorm(n,numeric(p),Sig)#
Y<-X%*%beta+rnorm(n,0,sd=sigma)#
#
v0s<-seq(0.1,1,by=1)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)#
#
###############################################################
# ********* Beta-binomial prior *****************************##
#
# UNIT STARTING VALUES#
#
beta_init<-rep(1,p)#
source("/Users/ville/Desktop/EMVS/EMVS_code2 (2).R")#
result1<-EMVS2(Y,#
               X,#
               v0s=v0s,#
               v1=v1,#
               type="betabinomial",#
               sigma_init=1,#
               epsilon=10^-4,#
               p = 0.5,#
               beta_init = beta_init,#
               a=a,#
               b=b,#
               v1_g=v1_g)
Testing:#
library(EMVSpackage)#
library(mvtnorm)#
#
n<-10000#
p<-500#
beta<-c(1,2,3,rep(0,p-3))#
#
rho<-0.5#
Sig<-rho^abs(rep(1,p)%o%1:p-(1:p))#
sigma<-sqrt(3)#
#
X<-rmvnorm(n,numeric(p),Sig)#
Y<-X%*%beta+rnorm(n,0,sd=sigma)#
#
v0s<-seq(0.1,1,by=0.01)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)#
#
###############################################################
# ********* Beta-binomial prior *****************************##
#
# UNIT STARTING VALUES#
#
beta_init<-rep(1,p)
system.time(result1<-EMVS2(Y,#
               X,#
               v0s=v0s,#
               v1=v1,#
               type="betabinomial",#
               sigma_init=1,#
               epsilon=10^-4,#
               p = 0.5,#
               beta_init = beta_init,#
               a=a,#
               b=b,#
               v1_g=v1_g))
system.time(#
result2 <- EMVS(Y=Y[,1],#
  X=X,#
  v0s = v0s,#
  v1 = v1,#
  type = "betabinomial",#
  beta_init = beta_init,#
  sigma_init = 1,#
  epsilon  = 10^-4,#
  temperature = NULL,#
  Z = NULL,#
  mu = NULL,#
  Sigma = NULL,#
  p = 0.5,#
  a = a,#
  b = b,#
  a_v1 = NULL,#
  b_v1 = NULL,#
  v1_g = v1_g))
76.856
56.469/76.856
Testing:#
library(EMVSpackage)#
library(mvtnorm)#
#
n<-10000#
p<-500#
beta<-c(1,2,3,rep(0,p-3))#
#
rho<-0.5#
Sig<-rho^abs(rep(1,p)%o%1:p-(1:p))#
sigma<-sqrt(3)#
#
X<-rmvnorm(n,numeric(p),Sig)#
Y<-X%*%beta+rnorm(n,0,sd=sigma)#
#
v0s<-seq(0.1,1,by=0.01)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)#
#
###############################################################
# ********* Beta-binomial prior *****************************##
#
# UNIT STARTING VALUES#
#
beta_init<-rep(1,p)
system.time(#
result2 <- EMVS(Y=Y[,1],#
  X=X,#
  v0s = v0s,#
  v1 = v1,#
  type = "betabinomial",#
  beta_init = beta_init,#
  sigma_init = 1,#
  epsilon  = 10^-4,#
  temperature = NULL,#
  Z = NULL,#
  mu = NULL,#
  Sigma = NULL,#
  p = 0.5,#
  a = a,#
  b = b,#
  a_v1 = NULL,#
  b_v1 = NULL,#
  v1_g = v1_g))
Testing:#
library(EMVSpackage)#
library(mvtnorm)#
#
n<-10000#
p<-500#
beta<-c(1,2,3,rep(0,p-3))#
#
rho<-0.5#
Sig<-rho^abs(rep(1,p)%o%1:p-(1:p))#
sigma<-sqrt(3)#
#
X<-rmvnorm(n,numeric(p),Sig)#
Y<-X%*%beta+rnorm(n,0,sd=sigma)#
#
v0s<-seq(0.1,1,by=0.1)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)
result2 = EMVS(Y=Y[,1],#
  X=X,#
  v0s = v0s,#
  v1 = v1,#
  type = "betabinomial",#
  beta_init = beta_init,#
  sigma_init = 1,#
  epsilon  = 10^-4,#
  temperature = NULL,#
  Z = NULL,#
  mu = NULL,#
  Sigma = NULL,#
  p = 0.5,#
  a = a,#
  b = b,#
  a_v1 = NULL,#
  b_v1 = NULL,#
  v1_g = v1_g)
v0s<-seq(0.1,1,by=1)
Testing:#
library(EMVSpackage)#
library(mvtnorm)#
#
n<-10000#
p<-500#
beta<-c(1,2,3,rep(0,p-3))#
#
rho<-0.5#
Sig<-rho^abs(rep(1,p)%o%1:p-(1:p))#
sigma<-sqrt(3)#
#
X<-rmvnorm(n,numeric(p),Sig)#
Y<-X%*%beta+rnorm(n,0,sd=sigma)#
#
v0s<-seq(0.1,1,by=1)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)
system.time(#
result2 <- EMVS(Y=Y[,1],#
  X=X,#
  v0s = v0s,#
  v1 = v1,#
  type = "betabinomial",#
  beta_init = beta_init,#
  sigma_init = 1,#
  epsilon  = 10^-4,#
  temperature = NULL,#
  Z = NULL,#
  mu = NULL,#
  Sigma = NULL,#
  p = 0.5,#
  a = a,#
  b = b,#
  a_v1 = NULL,#
  b_v1 = NULL,#
  v1_g = v1_g))
Testing:#
library(EMVSpackage)#
library(mvtnorm)#
#
n<-10000#
p<-500#
beta<-c(1,2,3,rep(0,p-3))#
#
rho<-0.5#
Sig<-rho^abs(rep(1,p)%o%1:p-(1:p))#
sigma<-sqrt(3)#
#
X<-rmvnorm(n,numeric(p),Sig)#
Y<-X%*%beta+rnorm(n,0,sd=sigma)#
#
v0s<-seq(0.1,1,by=1)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)
system.time(#
result2 <- EMVS(Y=Y[,1],#
  X=X,#
  v0s = v0s,#
  v1 = v1,#
  type = "betabinomial",#
  beta_init = beta_init,#
  sigma_init = 1,#
  epsilon  = 10^-4,#
  temperature = NULL,#
  Z = NULL,#
  mu = NULL,#
  Sigma = NULL,#
  p = 0.5,#
  a = a,#
  b = b,#
  a_v1 = NULL,#
  b_v1 = NULL,#
  v1_g = v1_g))
Testing:#
library(EMVSpackage)#
library(mvtnorm)#
#
n<-10000#
p<-500#
beta<-c(1,2,3,rep(0,p-3))#
#
rho<-0.5#
Sig<-rho^abs(rep(1,p)%o%1:p-(1:p))#
sigma<-sqrt(3)#
#
X<-rmvnorm(n,numeric(p),Sig)#
Y<-X%*%beta+rnorm(n,0,sd=sigma)#
#
v0s<-seq(0.1,1,by=1)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)#
system.time(#
result2 <- EMVS(Y=Y[,1],#
  X=X,#
  v0s = v0s,#
  v1 = v1,#
  type = "betabinomial",#
  beta_init = beta_init,#
  sigma_init = 1,#
  epsilon  = 10^-4,#
  temperature = NULL,#
  Z = NULL,#
  mu = NULL,#
  Sigma = NULL,#
  p = 0.5,#
  a = a,#
  b = b,#
  a_v1 = NULL,#
  b_v1 = NULL,#
  v1_g = v1_g))
system.time(#
result2 <- EMVS(Y=Y[,1],#
  X=X,#
  v0s = v0s,#
  v1 = v1,#
  type = "betabinomial",#
  beta_init = beta_init,#
  sigma_init = 1,#
  epsilon  = 10^-4,#
  temperature = NULL,#
  Z = NULL,#
  mu = NULL,#
  Sigma = NULL,#
  p = 0.5,#
  a = a,#
  b = b,#
  a_v1 = NULL,#
  b_v1 = NULL,#
  v1_g = v1_g))
Testing:#
library(EMVSpackage)#
library(mvtnorm)#
#
n<-10000#
p<-500#
beta<-c(1,2,3,rep(0,p-3))#
#
rho<-0.5#
Sig<-rho^abs(rep(1,p)%o%1:p-(1:p))#
sigma<-sqrt(3)#
#
X<-rmvnorm(n,numeric(p),Sig)#
Y<-X%*%beta+rnorm(n,0,sd=sigma)#
#
v0s<-seq(0.1,1,by=1)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)#
system.time(#
result2 <- EMVS(Y=Y[,1],#
  X=X,#
  v0s = v0s,#
  v1 = v1,#
  type = "betabinomial",#
  beta_init = beta_init,#
  sigma_init = 1,#
  epsilon  = 10^-4,#
  temperature = NULL,#
  Z = NULL,#
  mu = NULL,#
  Sigma = NULL,#
  p = 0.5,#
  a = a,#
  b = b,#
  a_v1 = NULL,#
  b_v1 = NULL,#
  v1_g = v1_g))
z = t(X) %*% Y
z = t(X) %*% X
system.time(z = t(X) %*% X)
system.time(z <- t(X) %*% X)
Testing:#
library(EMVSpackage)#
library(mvtnorm)#
#
n<-10000#
p<-500#
beta<-c(1,2,3,rep(0,p-3))#
#
rho<-0.5#
Sig<-rho^abs(rep(1,p)%o%1:p-(1:p))#
sigma<-sqrt(3)#
#
X<-rmvnorm(n,numeric(p),Sig)#
Y<-X%*%beta+rnorm(n,0,sd=sigma)#
#
v0s<-seq(0.1,1,by=1)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)#
system.time(#
result2 <- EMVS(Y=Y[,1],#
  X=X,#
  v0s = v0s,#
  v1 = v1,#
  type = "betabinomial",#
  beta_init = beta_init,#
  sigma_init = 1,#
  epsilon  = 10^-4,#
  temperature = NULL,#
  Z = NULL,#
  mu = NULL,#
  Sigma = NULL,#
  p = 0.5,#
  a = a,#
  b = b,#
  a_v1 = NULL,#
  b_v1 = NULL,#
  v1_g = v1_g))
library(EMVSpackage)#
library(mvtnorm)#
#
n<-10000#
p<-500#
beta<-c(1,2,3,rep(0,p-3))#
#
rho<-0.5#
Sig<-rho^abs(rep(1,p)%o%1:p-(1:p))#
sigma<-sqrt(3)#
#
X<-rmvnorm(n,numeric(p),Sig)#
Y<-X%*%beta+rnorm(n,0,sd=sigma)#
#
v0s<-seq(0.1,1,by=0.1)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)#
system.time(#
result2 <- EMVS(Y=Y[,1],#
  X=X,#
  v0s = v0s,#
  v1 = v1,#
  type = "betabinomial",#
  beta_init = beta_init,#
  sigma_init = 1,#
  epsilon  = 10^-4,#
  temperature = NULL,#
  Z = NULL,#
  mu = NULL,#
  Sigma = NULL,#
  p = 0.5,#
  a = a,#
  b = b,#
  a_v1 = NULL,#
  b_v1 = NULL,#
  v1_g = v1_g))
beta_init<-rep(1,p)#
source("/Users/ville/Desktop/EMVS/EMVS_code2 (2).R")
system.time(result1<-EMVS2(Y,#
               X,#
               v0s=v0s,#
               v1=v1,#
               type="betabinomial",#
               sigma_init=1,#
               epsilon=10^-4,#
               p = 0.5,#
               beta_init = beta_init,#
               a=a,#
               b=b,#
               v1_g=v1_g))
result1
head(result1)
head(result1$beta_k)
names(result1)
names(result1)head
head(result1$betas)
head(result1$betas[,1:5])
head(result2$betas[,1:5])
Testing:#
library(EMVSpackage)#
library(mvtnorm)#
#
n<-10000#
p<-500#
beta<-c(1,2,3,rep(0,p-3))#
#
rho<-0.5#
Sig<-rho^abs(rep(1,p)%o%1:p-(1:p))#
sigma<-sqrt(3)#
#
X<-rmvnorm(n,numeric(p),Sig)#
Y<-X%*%beta+rnorm(n,0,sd=sigma)#
#
v0s<-seq(0.1,1,by=0.1)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)
?EWMS
Testing:#
library(EMVSpackage)
?EMVS
library(EMVSpackage)
?EMVS
library(EMVSpackage)
?EMVS
Testing:#
library(EMVSpackage)#
library(mvtnorm)#
#
n<-10000#
p<-500#
beta<-c(1,2,3,rep(0,p-3))#
#
rho<-0.5#
Sig<-rho^abs(rep(1,p)%o%1:p-(1:p))#
sigma<-sqrt(3)#
#
X<-rmvnorm(n,numeric(p),Sig)#
Y<-X%*%beta+rnorm(n,0,sd=sigma)#
#
v0s<-seq(0.1,1,by=0.1)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)#
system.time(#
result2 <- EMVS(Y=Y[,1],#
  X=X,#
  v0s = v0s,#
  v1 = v1,#
  type = "betabinomial",#
  beta_init = beta_init,#
  sigma_init = 1,#
  epsilon  = 10^-4,#
  temperature = NULL,#
  Z = NULL,#
  mu = NULL,#
  Sigma = NULL,#
  p = 0.5,#
  a = a,#
  b = b,#
  a_v1 = NULL,#
  b_v1 = NULL,#
  v1_g = v1_g))
Testing:#
library(EMVSpackage)#
library(mvtnorm)#
#
n<-10000#
p<-500#
beta<-c(1,2,3,rep(0,p-3))#
#
rho<-0.5#
Sig<-rho^abs(rep(1,p)%o%1:p-(1:p))#
sigma<-sqrt(3)#
#
X<-rmvnorm(n,numeric(p),Sig)#
Y<-X%*%beta+rnorm(n,0,sd=sigma)#
#
v0s<-seq(0.1,1,by=0.1)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)
library(EMVSpackage)
system.time(#
result2 <- EMVS(Y=Y[,1],#
  X=X,#
  v0s = v0s,#
  v1 = v1,#
  type = "betabinomial",#
  beta_init = beta_init,#
  sigma_init = 1,#
  epsilon  = 10^-4,#
  temperature = NULL,#
  Z = NULL,#
  mu = NULL,#
  Sigma = NULL,#
  p = 0.5,#
  a = a,#
  b = b,#
  a_v1 = NULL,#
  b_v1 = NULL,#
  v1_g = v1_g))
Testing:#
library(mvtnorm)#
#
n<-10000#
p<-500#
beta<-c(1,2,3,rep(0,p-3))#
#
rho<-0.5#
Sig<-rho^abs(rep(1,p)%o%1:p-(1:p))#
sigma<-sqrt(3)#
#
X<-rmvnorm(n,numeric(p),Sig)#
Y<-X%*%beta+rnorm(n,0,sd=sigma)#
#
v0s<-seq(0.1,1,by=0.1)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)
system.time(#
result2 <- EMVS(Y=Y[,1],#
  X=X,#
  v0s = v0s,#
  v1 = v1,#
  type = "betabinomial",#
  beta_init = beta_init,#
  sigma_init = 1,#
  epsilon  = 10^-4,#
  temperature = NULL,#
  Z = NULL,#
  mu = NULL,#
  Sigma = NULL,#
  p = 0.5,#
  a = a,#
  b = b,#
  a_v1 = NULL,#
  b_v1 = NULL,#
  v1_g = v1_g))
library(EMVSpackage)#
#
system.time(#
result2 <- EMVS(Y=Y[,1],#
  X=X,#
  v0s = v0s,#
  v1 = v1,#
  type = "betabinomial",#
  beta_init = beta_init,#
  sigma_init = 1,#
  epsilon  = 10^-4,#
  temperature = NULL,#
  Z = NULL,#
  mu = NULL,#
  Sigma = NULL,#
  p = 0.5,#
  a = a,#
  b = b,#
  a_v1 = NULL,#
  b_v1 = NULL,#
  v1_g = v1_g))
system.time(result1<-EMVS2(Y,#
               X,#
               v0s=v0s,#
               v1=v1,#
               type="betabinomial",#
               sigma_init=1,#
               epsilon=10^-4,#
               p = 0.5,#
               beta_init = beta_init,#
               a=a,#
               b=b,#
               v1_g=v1_g))
source("/Users/ville/Desktop/EMVS/EMVS_code2 (2).R")
system.time(result1<-EMVS2(Y,#
               X,#
               v0s=v0s,#
               v1=v1,#
               type="betabinomial",#
               sigma_init=1,#
               epsilon=10^-4,#
               p = 0.5,#
               beta_init = beta_init,#
               a=a,#
               b=b,#
               v1_g=v1_g))
n<-10000#
p<-500#
beta<-c(1,2,3,rep(0,p-3))#
#
rho<-0.5#
Sig<-rho^abs(rep(1,p)%o%1:p-(1:p))#
sigma<-sqrt(3)#
#
X<-rmvnorm(n,numeric(p),Sig)#
Y<-X%*%beta+rnorm(n,0,sd=sigma)#
#
v0s<-seq(0.1,1,by=0.1)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)
Testing:#
library(mvtnorm)#
#
n<-10000#
p<-500#
beta<-c(1,2,3,rep(0,p-3))#
#
rho<-0.5#
Sig<-rho^abs(rep(1,p)%o%1:p-(1:p))#
sigma<-sqrt(3)#
#
X<-rmvnorm(n,numeric(p),Sig)#
Y<-X%*%beta+rnorm(n,0,sd=sigma)#
#
v0s<-seq(0.1,1,by=0.1)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)
library(EMVSpackage)
system.time(#
result2 <- EMVS(Y=Y[,1],#
  X=X,#
  v0s = v0s,#
  v1 = v1,#
  type = "betabinomial",#
  beta_init = beta_init,#
  sigma_init = 1,#
  epsilon  = 10^-4,#
  temperature = NULL,#
  Z = NULL,#
  mu = NULL,#
  Sigma = NULL,#
  p = 0.5,#
  a = a,#
  b = b,#
  a_v1 = NULL,#
  b_v1 = NULL,#
  v1_g = v1_g))
source("/Users/ville/Desktop/EMVS/EMVS_code2 (2).R")
system.time(result1<-EMVS2(Y,#
               X,#
               v0s=v0s,#
               v1=v1,#
               type="betabinomial",#
               sigma_init=1,#
               epsilon=10^-4,#
               p = 0.5,#
               beta_init = beta_init,#
               a=a,#
               b=b,#
               v1_g=v1_g))
names(result1)
head(result1$betas[,1:5])
head(result2$betas[,1:5])
head(result2$log_post[1:5])
head(result1$log_post[1:5])
dim(result2$betas)
EMVS
?EMVS
v0s<-seq(0.1,1,by=0.5)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)
v0s
v0s<-seq(0.1,1,by=0.05)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)
v0s
system.time(#
result2 <- EMVS(Y=Y[,1],#
  X=X,#
  v0s = v0s,#
  v1 = v1,#
  type = "betabinomial",#
  beta_init = beta_init,#
  sigma_init = 1,#
  epsilon  = 10^-4,#
  temperature = NULL,#
  Z = NULL,#
  mu = NULL,#
  Sigma = NULL,#
  p = 0.5,#
  a = a,#
  b = b,#
  a_v1 = NULL,#
  b_v1 = NULL,#
  v1_g = v1_g))
system.time(result1<-EMVS2(Y,#
               X,#
               v0s=v0s,#
               v1=v1,#
               type="betabinomial",#
               sigma_init=1,#
               epsilon=10^-4,#
               p = 0.5,#
               beta_init = beta_init,#
               a=a,#
               b=b,#
               v1_g=v1_g))
Testing:#
library(mvtnorm)#
#
n<-10000#
p<-500#
beta<-c(1,2,3,rep(0,p-3))#
#
rho<-0.5#
Sig<-rho^abs(rep(1,p)%o%1:p-(1:p))#
sigma<-sqrt(3)#
#
X<-rmvnorm(n,numeric(p),Sig)#
Y<-X%*%beta+rnorm(n,0,sd=sigma)#
#
v0s<-seq(0.1,1,by=1)#
v1<-100#
v1_g<-100#
a<-1#
b<-1#
beta_init<-rep(1,p)#
#
library(EMVSpackage)#
#
system.time(#
result2 <- EMVS(Y=Y[,1],#
  X=X,#
  v0s = v0s,#
  v1 = v1,#
  type = "betabinomial",#
  beta_init = beta_init,#
  sigma_init = 1,#
  epsilon  = 10^-4,#
  temperature = NULL,#
  Z = NULL,#
  mu = NULL,#
  Sigma = NULL,#
  p = 0.5,#
  a = a,#
  b = b,#
  a_v1 = NULL,#
  b_v1 = NULL,#
  v1_g = v1_g))
T = 100#
Ks = c(20, 40, 60, 80, 100) ## Number of problems#
betas = c(0.5, 0.75, 1, 1/0.75, 1/0.5) ## Expected bias mean: same effect around 1.0#
sigma2s = c(0.5, 1.0, 1.5, 2.0, 2.5)#
load("/Users/ville/Desktop/Dynamic_Logit_Model/ExpertAnalysis/X.losses.RData")#
load("/Users/ville/Desktop/Dynamic_Logit_Model/ExpertAnalysis/b.losses.RData")#
#
#load("/Users/ville/Desktop/Dynamic_Logit_Model/ExpertAnalysis/X.log.losses.RData")#
#load("/Users/ville/Desktop/Dynamic_Logit_Model/ExpertAnalysis/b.log.losses.RData")#
#X.losses = X.log.losses#
#b.losses = b.log.losses#
#
######## XXXXXXXXX#
#
#betas.x = sapply(betas, function(x) exp(mean(log(x*c(0.5, 0.75, 1, 1/0.75, 1/0.5)))) )#
#betas.x = sapply(betas, function(x) mean(x*c(0.5, 0.75, 1, 1/0.75, 1/0.5)) )#
#betas.x = sapply(betas, function(x) sd(x*c(0.5, 0.75, 1, 1/0.75, 1/0.5)) )#
#betas.x = sapply(betas, function(x) mean(abs(x*c(0.5, 0.75, 1, 1/0.75, 1/0.5)-1)) )#
betas.x = betas#
wsize = 2#
hsize = 1.8#
font = 8#
#
setwd("/Users/ville/probability_aggregation/Figures/")#
#CairoPDF(file = "SyntheticSigma2.pdf", width = size, height = size, onefile = TRUE, family = "Times", pointsize = font)#
pdf("SyntheticSigma2.pdf", width = wsize, height = hsize, family = "Times", pointsize = font)#
par(mgp = c(1.5,.5,0), mar=c(2.4,2.8,0.8,0.2))#
BRI = apply(X.losses[[1]], 1, mean)#
LOG = apply(X.losses[[2]], 1, mean)#
#EWMLA = apply(X.losses[[3]], 1, mean)#
EWMA = apply(X.losses[[4]], 1, mean)#
#FULL = apply(X.losses[[3]], 1, mean)#
plot(BRI~sigma2s, type = "l", col = 1, lwd = 2, ylim = range(BRI, LOG, EWMA), xlab = expression(paste(sigma^2)), ylab = "Quadratic Loss", axes = FALSE)#
box()#
axis(1, at = round(sigma2s,1))#
axis(2)#
#axis(2, at = signif(seq(min(BRI,LOG), max(BRI,LOG), length = 5)[2:4], 2))#
lines(LOG~sigma2s, lty = 2, lwd = 2)#
#lines(EWMLA~sigma2s, lty = 2, lwd = 2, col = 2)#
lines(EWMA~sigma2s, lty = 3, lwd = 2)#
#lines(FULL~sigma2s, col = 3, lwd = 2)#
dev.off()#
#
setwd("/Users/ville/probability_aggregation/Figures/")#
#CairoPDF(file = "SyntheticBeta.pdf", width = size, height = size, onefile = TRUE, family = "Times", pointsize = font)#
pdf(file = "SyntheticBeta.pdf", width = wsize, height = hsize, onefile = TRUE, family = "Times", pointsize = font)#
par(mgp = c(1.5,.5,0), mar=c(2.4,2.8,0.8,0.2))#
BRI = apply(X.losses[[1]], 2, mean)#
LOG = apply(X.losses[[2]], 2, mean)#
#EWMLA = apply(X.losses[[3]], 2, mean)#
EWMA = apply(X.losses[[4]], 2, mean)#
#FULL = apply(X.losses[[3]], 2, mean)#
plot(BRI~betas.x, type = "l", col = 1, lwd = 2, ylim =range(BRI, LOG, EWMA), xlab = expression(paste(beta)), ylab = "Quadratic Loss", axes = FALSE)#
box()#
axis(1, at = round(betas.x,1))#
#axis(2, at = signif(seq(min(BRI,LOG), max(BRI,LOG), length = 5)[2:4], 2))#
axis(2)#
lines(LOG~betas.x, lty = 2, lwd = 2)#
#lines(EWMLA~betas.x, lty = 2, lwd = 2, col = 2)#
lines(EWMA~betas.x, lty = 3, lwd = 2)#
#lines(FULL~betas, col = 3, lwd = 2)#
dev.off()#
#
setwd("/Users/ville/probability_aggregation/Figures/")#
#CairoPDF(file = "SyntheticK.pdf", width = size, height = size, onefile = TRUE, family = "Times", pointsize = font)#
pdf(file = "SyntheticK.pdf", width = wsize, height = hsize, onefile = TRUE, family = "Times", pointsize = font)#
par(mgp = c(1.5,.5,0), mar=c(2.4,2.8,0.8,0.2))#
BRI = apply(X.losses[[1]], 3, mean)#
LOG = apply(X.losses[[2]], 3, mean)#
#EWMLA = apply(X.losses[[3]], 3, mean)#
EWMA = apply(X.losses[[4]], 3, mean)#
#FULL = apply(X.losses[[3]], 3, mean)#
plot(BRI~Ks, type = "l", col = 1, lwd = 2, ylim = range(BRI, LOG, EWMA), xlab = "K", ylab = "Quadratic Loss", axes = FALSE)#
box()#
axis(1, at = round(Ks, 1))#
axis(2)#
#axis(2, at = signif(seq(min(BRI,LOG), max(BRI,LOG), length = 5)[2:4], 2))#
lines(LOG~Ks, lwd = 2, lty = 2)#
#lines(EWMLA~Ks, lty = 2, lwd = 2, col = 2)#
lines(EWMA~Ks, lty = 3, lwd = 2)#
#lines(FULL~Ks, col = 3, lwd = 2)#
dev.off()#
######## BBBBBBBBBBBB#
setwd("/Users/ville/probability_aggregation/Figures/")#
pdf("SyntheticSigma2bias.pdf", width = wsize, height = hsize, onefile = TRUE, family = "Times", pointsize = font)#
par(mgp = c(1.5,.5,0), mar=c(2.4,2.8,0.8,0.2))#
BRI = apply(b.losses[[1]], 1, mean)#
LOG = apply(b.losses[[2]], 1, mean)#
#FULL = apply(b.losses[[3]], 1, mean)#
plot(BRI~sigma2s, type = "l", col = 1, lwd = 2, ylim = range(BRI, LOG), xlab = expression(paste(sigma^2)), ylab = "Quadratic Loss", axes = FALSE)#
box()#
axis(1, at = round(sigma2s, 1))#
#axis(2, at = signif(seq(min(BRI,LOG), max(BRI,LOG), length = 5)[2:4], 2))#
axis(2)#
lines(LOG~sigma2s, lwd = 2, lty = 2)#
#lines(FULL~sigma2s, col = 3, lwd = 2)#
dev.off()#
#
setwd("/Users/ville/probability_aggregation/Figures/")#
pdf("SyntheticBetabias.pdf", width = wsize, height = hsize, onefile = TRUE, family = "Times", pointsize = font)#
par(mgp = c(1.5,.5,0), mar=c(2.4,2.8,0.8,0.2))#
BRI = apply(b.losses[[1]], 2, mean)#
LOG = apply(b.losses[[2]], 2, mean)#
#FULL = apply(b.losses[[3]], 2, mean)#
plot(BRI~betas.x, type = "l", col = 1, lwd = 2, ylim = range(BRI, LOG), xlab = expression(paste(beta)), ylab = "Quadratic Loss", axes = FALSE)#
box()#
axis(1, at = round(betas.x, 1))#
axis(2)#
#axis(2, at = signif(seq(min(BRI,LOG), max(BRI,LOG), length = 5)[2:4], 2))#
lines(LOG~betas.x, lwd = 2, lty = 2)#
#lines(FULL~betas, col = 3, lwd = 2)#
dev.off()#
#
setwd("/Users/ville/probability_aggregation/Figures/")#
pdf("SyntheticKbias.pdf", width = wsize, height = hsize, onefile = TRUE, family = "Times", pointsize = font)#
par(mgp = c(1.5,.5,0), mar=c(2.4,2.8,0.8,0.2))#
BRI = apply(b.losses[[1]], 3, mean)#
LOG = apply(b.losses[[2]], 3, mean)#
#FULL = apply(b.losses[[3]], 3, mean)#
plot(BRI~Ks, type = "l", col = 1, lwd = 2, ylim = range(BRI, LOG), xlab = "K", ylab = "Quadratic Loss", axes = FALSE)#
box()#
axis(1, at = round(Ks, 1))#
axis(2)#
#axis(2, at = signif(seq(min(BRI,LOG), max(BRI,LOG), length = 5)[2:4], 2))#
lines(LOG~Ks,  lwd = 2, lty = 2)#
#lines(FULL~Ks, col = 3, lwd = 2)#
dev.off()
l1 = 1000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale
head(CX)
head(CX_sigma)
gamma_alpha = -c(1:7)#
gamma_sigma2 = c(1, -0.2)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))
head(alphas)
plot(sort(alphas))
sqrt(exp(CX_sigma %*% gamma_sigma2))
plot(sqrt(exp(CX_sigma %*% gamma_sigma2))~sizes)
gamma_alpha = -c(1:7)*0.3#
gamma_sigma2 = c(1, -0.2)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))
plot(sqrt(exp(CX_sigma %*% gamma_sigma2))~sizes)
gamma_alpha = -c(1:7)*0.3#
gamma_sigma2 = c(0.5, -1)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))
plot(alphas~sizes)
plot(CX %*% gamma_alpha~sizes)
gamma_alpha = -c(1, 0.2, 0.8, 0.9, 2, 3, 4)#
gamma_sigma2 = c(0.5, -1)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))#
plot(CX %*% gamma_alpha~sizes)
gamma_alpha = -c(0.1, 0.2, 0.8, 0.9, 2, 3, 4)#
gamma_sigma2 = c(0.5, -1)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))#
plot(CX %*% gamma_alpha~sizes)
plot(alphas~sizes)
?write.table
write.table(alphas, file = "alphas.csv", row.names = FALSE)
getwd()
setwd("/Users/ville/probability_aggregation/Figures")
getwd()
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 1000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = -c(0.1, 0.2, 0.8, 0.9, 2, 3, 4)#
gamma_sigma2 = c(0.5, -1)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE)
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 1000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = -c(0.1, 0.2, 0.8, 0.9, 2, 3, 4)#
gamma_sigma2 = c(0.5, -1)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE, col.names = FALSE)
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 1000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = -c(0.1, 0.2, 0.8, 0.9, 2, 3, 4)#
gamma_sigma2 = c(0.5, -1)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE, col.names = FALSE, sep = "l")
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 1000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = -c(0.1, 0.2, 0.8, 0.9, 2, 3, 4)#
gamma_sigma2 = c(0.5, -1)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE, col.names = FALSE, sep = ",")
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 5000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = -c(0.1, 0.2, 0.8, 0.9, 2, 3, 4)#
gamma_sigma2 = c(0.5, -1)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE)#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 2000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = -c(0.1, 0.2, 0.8, 0.9, 2, 3, 4)#
gamma_sigma2 = c(0.5, -1)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE)#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
dim(CX)
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 1000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = -c(0.1, 0.2, 0.8, 0.9, 2, 3, 4)#
gamma_sigma2 = c(0.5, -1)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE)#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
CX
t(CX) %*% CX
solve(t(CX) %*% CX)
chol(solve(t(CX) %*% CX))
chol(solve(t(CX) %*% CX + diag(1/(10^6))))
chol(solve(t(CX) %*% CX + diag(rep(1/(10^6), 7))))
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 1000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = -c(0.1, 0.2, 0.8, 0.9, 2, 3, 4)#
gamma_sigma2 = c(0.5, -1)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE)#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
solve(t(CX) %*% CX)
t(CX) %*% CX
t(CX) %*% diag(l1) %*% CX
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 10#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = -c(0.1, 0.2, 0.8, 0.9, 2, 3, 4)#
gamma_sigma2 = c(0.5, -1)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE)#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
t(CX) %*% CX
t(CX) %*% diag(7) %*% CX
t(CX) %*% diag(l1) %*% CX
diag(l1)
l1
t(CX) %*% diag(l1+1) %*% CX
t(CX)
CX
alpha
alphas
length(alphas)
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 10#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = -c(0.1, 0.2, 0.8, 0.9, 2, 3, 4)#
gamma_sigma2 = c(0.5, -1)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE,  col.names = FALSE, sep = ",")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 5000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = -c(0.1, 0.2, 0.8, 0.9, 2, 3, 4)#
gamma_sigma2 = c(0.5, -1)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE,  col.names = FALSE, sep = ",")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
CX_sigma * sigma2_gamma
CX_sigma %*% sigma2_gamma
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 5000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(0.5, -1)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE,  col.names = FALSE, sep = ",")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 5000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(0.5, -1)#
#
sigma2_alpha = exp(rnorm(l1, CX_sigma %*% gamma_sigma2, 0.1))#
#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(sigma2_alpha))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE,  col.names = FALSE, sep = ",")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
mu = 0.2#
sigma = 1.6#
#
a = mu^2/sigma + 2#
b = mu^3/sigma + mu#
#
b/(a-1)#
b^2/ ((a-1)^2 * (a-2))
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 10000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(0.5, -1)#
#
sigma2_alpha = exp(rnorm(l1, CX_sigma %*% gamma_sigma2, 0.1))#
#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(sigma2_alpha))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE,  col.names = FALSE, sep = ",")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 6000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(0.5, -1)#
#
sigma2_alpha = exp(rnorm(l1, CX_sigma %*% gamma_sigma2, 0.1))#
#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(sigma2_alpha))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE,  col.names = FALSE, sep = ",")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
plot(sigma2_alpha~sizes)
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(2.5, -1)#
#
sigma2_alpha = exp(rnorm(l1, CX_sigma %*% gamma_sigma2, 0.1))
plot(sigma2_alpha~sizes)
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(1, -1)#
#
sigma2_alpha = exp(rnorm(l1, CX_sigma %*% gamma_sigma2, 0.1))
plot(sigma2_alpha~sizes)
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 6000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(1, -1)#
#
sigma2_alpha = exp(rnorm(l1, CX_sigma %*% gamma_sigma2, 0.1))#
#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(sigma2_alpha))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE,  col.names = FALSE, sep = ",")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 6000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(1, -1)#
#
#sigma2_alpha = exp(rnorm(l1, CX_sigma %*% gamma_sigma2, 0.1))#
sigma2_alpha = exp(CX_sigma %*% gamma_sigma2)#
#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(sigma2_alpha))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE,  col.names = FALSE, sep = ",")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
sqrt(1/(1:100))
1/(1:100)
1/sqrt((1:100))
1/sqrt((1:100))#
## Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 4000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(1, -1)#
#
#sigma2_alpha = exp(rnorm(l1, CX_sigma %*% gamma_sigma2, 0.1))#
sigma2_alpha = exp(CX_sigma %*% gamma_sigma2)#
#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(sigma2_alpha))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE,  col.names = FALSE, sep = ",")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 6000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(1, -1)#
#
#sigma2_alpha = exp(rnorm(l1, CX_sigma %*% gamma_sigma2, 0.1))#
sigma2_alpha = exp(CX_sigma %*% gamma_sigma2)#
#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(sigma2_alpha))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE,  col.names = FALSE, sep = ",")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 6000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = ns(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(1, -1)#
#
#sigma2_alpha = exp(rnorm(l1, CX_sigma %*% gamma_sigma2, 0.1))#
sigma2_alpha = exp(CX_sigma %*% gamma_sigma2)#
#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(sigma2_alpha))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE,  col.names = FALSE, sep = ",")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
?ns
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 6000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
#CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX = ns(sizes_scale, knots = knots, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(1, -1)#
#
#sigma2_alpha = exp(rnorm(l1, CX_sigma %*% gamma_sigma2, 0.1))#
sigma2_alpha = exp(CX_sigma %*% gamma_sigma2)#
#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(sigma2_alpha))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE,  col.names = FALSE, sep = ",")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
dim(CX)
?ns
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 6000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
#CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX = ns(sizes_scale, knots = knots, df = 7, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(1, -1)#
#
#sigma2_alpha = exp(rnorm(l1, CX_sigma %*% gamma_sigma2, 0.1))#
sigma2_alpha = exp(CX_sigma %*% gamma_sigma2)#
#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(sigma2_alpha))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE,  col.names = FALSE, sep = ",")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
dim(CX)
CX = ns(sizes_scale, knots = knots, df = 7, intercept = TRUE)
head(CX)
?ns
poly
poly(sizes_scale, 3)
CX = cbind(1, poly(sizes_scale, 3))
head(CX)
pmax
pmax(c(-2, 3, 4), 0)
CX = cbind(1, poly(sizes_scale, 3))#
for(i in 1:3){#
  CX[,4+i] = pmax((sizes_scale - knots[i]), 0)^3#
}
CX = cbind(1, poly(sizes_scale, 3))#
for(i in 1:3){#
  CX = rbind(CX, pmax((sizes_scale - knots[i]), 0)^3)#
}
CX = cbind(1, poly(sizes_scale, 3))#
for(i in 1:3){#
  CX = cbind(CX, pmax((sizes_scale - knots[i]), 0)^3)#
}
head(CX)
CX[order(size),]
CX[order(sizes),]
CX[order(sizes),]
head(CX[order(sizes),])
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 6000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
#CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
#CX = ns(sizes_scale, knots = knots, df = 7, intercept = TRUE)#
CX = cbind(1, poly(sizes_scale, 3))#
for(i in 1:3){#
  CX = cbind(CX, pmax((sizes_scale - knots[i]), 0)^3)#
}#
#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(1, -1)#
#
#sigma2_alpha = exp(rnorm(l1, CX_sigma %*% gamma_sigma2, 0.1))#
sigma2_alpha = exp(CX_sigma %*% gamma_sigma2)#
#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(sigma2_alpha))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE,  col.names = FALSE, sep = ",")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
poly(sizes_scale, 3)
CX = cbind(1, poly(sizes_scale, 3))
CX
plot(gamma_alpha~sizes)
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 6000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
#CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
#CX = ns(sizes_scale, knots = knots, df = 7, intercept = TRUE)#
CX = cbind(1, poly(sizes_scale, 3))#
for(i in 1:3){#
  CX = cbind(CX, pmax((sizes_scale - knots[i]), 0)^3)#
}#
#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(1, -1)#
#
#sigma2_alpha = exp(rnorm(l1, CX_sigma %*% gamma_sigma2, 0.1))#
sigma2_alpha = exp(CX_sigma %*% gamma_sigma2)#
#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(sigma2_alpha))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE,  col.names = FALSE, sep = ",")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
plot(gamma_alpha~sizes)
dim(CX)
plot(CX %*% gamma_alpha~sizes)
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
#CX = ns(sizes_scale, knots = knots, df = 7, intercept = TRUE)#
#CX = cbind(1, poly(sizes_scale, 3))#
#for(i in 1:3){#
#  CX = cbind(CX, pmax((sizes_scale - knots[i]), 0)^3)#
#}#
#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(1, -1)#
#
#sigma2_alpha = exp(rnorm(l1, CX_sigma %*% gamma_sigma2, 0.1))#
sigma2_alpha = exp(CX_sigma %*% gamma_sigma2)#
#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(sigma2_alpha))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE,  col.names = FALSE, sep = ",")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
?ns
ns(sizes, df = 7)
dim(ns(sizes, df = 7))
?ns
dim(ns(sizes, df = 7, intercept = TRUE))
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 6000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
#CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX = ns(sizes, df = 7, intercept = TRUE)#
#CX = ns(sizes_scale, knots = knots, df = 7, intercept = TRUE)#
#CX = cbind(1, poly(sizes_scale, 3))#
#for(i in 1:3){#
#  CX = cbind(CX, pmax((sizes_scale - knots[i]), 0)^3)#
#}#
#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(1, -1)#
#
#sigma2_alpha = exp(rnorm(l1, CX_sigma %*% gamma_sigma2, 0.1))#
sigma2_alpha = exp(CX_sigma %*% gamma_sigma2)#
#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(sigma2_alpha))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE,  col.names = FALSE, sep = ",")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
Generate synthetic hospital data:#
setwd("/Users/ville/Desktop/SYNTHETIC")#
l1 = 6000#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
#CX = ns(sizes, df = 7, intercept = TRUE)#
#CX = ns(sizes_scale, knots = knots, df = 7, intercept = TRUE)#
#CX = cbind(1, poly(sizes_scale, 3))#
#for(i in 1:3){#
#  CX = cbind(CX, pmax((sizes_scale - knots[i]), 0)^3)#
#}#
#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(1, -1)#
#
#sigma2_alpha = exp(rnorm(l1, CX_sigma %*% gamma_sigma2, 0.1))#
sigma2_alpha = exp(CX_sigma %*% gamma_sigma2)#
#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(sigma2_alpha))#
plot(CX %*% gamma_alpha~sizes)#
plot(alphas~sizes)#
#
write.table(alphas, file = "alphas.csv", row.names = FALSE,  col.names = FALSE, sep = ",")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(CX_sigma, file = "CX_sigma.csv", row.names = FALSE, col.names = FALSE, sep = ",")
setwd("/Users/ville/Desktop/SYNTHETIC")#
#
## Generate synthetic hospital data:#
l1 = 1000#
m = 27#
max.size = 20#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = -c(1:7)#
gamma_sigma2 = c(1, -0.2)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))#
l = sum(sizes)#
beta = round(rnorm(27), 1)#
X = matrix(sample(0:1, l*m, replace = TRUE), l, m)#
t_mean = alphas[rep(1:l1, sizes)] + X %*% beta#
nu = 8#
Z = t_mean + rnorm(l) * sqrt(nu/rchisq(l, nu))#
Y = ifelse(Z >= 0, 1, 0)#
dataset = data.frame(Y, hosp_id = c(1:l1)[rep(1:l1, sizes)], X, size = sizes[rep(1:l1, sizes)])
head(dataset)
dataset = data.frame(hosp_id = c(1:l1)[rep(1:l1, sizes)], Y, , X, size = sizes[rep(1:l1, sizes)])
head()
dataset = data.frame(hosp_id = c(1:l1)[rep(1:l1, sizes)], Y, X, size = sizes[rep(1:l1, sizes)])
head(dataset)
dataset = data.frame(hosp_id = c(1:l1)[rep(1:l1, sizes)], Y, X, size = sizes[rep(1:l1, sizes, sizes, sizes, sizes)])
dataset = data.frame(hosp_id = c(1:l1)[rep(1:l1, sizes)], Y, X, size = sizes[rep(1:l1, sizes)], 0, 0, size = sizes[rep(1:l1, sizes)])
dim(dataset)
head(dataset)
setwd("/Users/ville/Desktop/SYNTHETIC")#
#
## Generate synthetic hospital data:#
l1 = 1000#
m = 27#
max.size = 20#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = -c(1:7)#
gamma_sigma2 = c(1, -0.2)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))#
l = sum(sizes)#
beta = round(rnorm(27), 1)#
X = matrix(sample(0:1, l*m, replace = TRUE), l, m)#
t_mean = alphas[rep(1:l1, sizes)] + X %*% beta#
nu = 8#
Z = t_mean + rnorm(l) * sqrt(nu/rchisq(l, nu))#
Y = ifelse(Z >= 0, 1, 0)#
dataset = data.frame(hosp_id = c(1:l1)[rep(1:l1, sizes)], Y, X, size = sizes[rep(1:l1, sizes)], 0, 0, size = sizes[rep(1:l1, sizes)])#
save(alphas, file = "alphas.true.RData")#
save(beta, file = "beta.true.RData")#
save(gamma_alpha, file = "gamma_alpha.true.RData")#
save(gamma_sigma2, file = "gamma_sigma2.true.RData")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(dataset, file = "dataset.csv", row.names = FALSE, col.names = FALSE, sep = ",")
write.table(knots, file = "knots.csv", row.names = FALSE, col.names = FALSE, sep = ",")
setwd("/Users/ville/Desktop/SYNTHETIC")#
#
## Generate synthetic hospital data:#
l1 = 1000#
m = 27#
max.size = 20#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(1, -1)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))#
l = sum(sizes)#
beta = 1:27#
X = matrix(sample(0:1, l*m, replace = TRUE), l, m)#
t_mean = alphas[rep(1:l1, sizes)] + X %*% beta#
nu = 8#
Z = t_mean + rnorm(l) * sqrt(nu/rchisq(l, nu))#
Y = ifelse(Z >= 0, 1, 0)#
dataset = data.frame(hosp_id = c(1:l1)[rep(1:l1, sizes)], Y, X, size = sizes[rep(1:l1, sizes)], 0, 0, size = sizes[rep(1:l1, sizes)])#
save(alphas, file = "alphas.true.RData")#
save(beta, file = "beta.true.RData")#
save(gamma_alpha, file = "gamma_alpha.true.RData")#
save(gamma_sigma2, file = "gamma_sigma2.true.RData")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(dataset, file = "dataset.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(knots, file = "knots.csv", row.names = FALSE, col.names = FALSE, sep = ",")
setwd("/Users/ville/Desktop/SYNTHETIC")#
#
## Generate synthetic hospital data:#
l1 = 4000#
m = 27#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(1, -1)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))#
l = sum(sizes)#
beta = 1:27#
X = matrix(sample(0:1, l*m, replace = TRUE), l, m)#
t_mean = alphas[rep(1:l1, sizes)] + X %*% beta#
nu = 8#
Z = t_mean + rnorm(l) * sqrt(nu/rchisq(l, nu))#
Y = ifelse(Z >= 0, 1, 0)#
dataset = data.frame(hosp_id = c(1:l1)[rep(1:l1, sizes)], Y, X, size = sizes[rep(1:l1, sizes)], 0, 0, size = sizes[rep(1:l1, sizes)])#
save(alphas, file = "alphas.true.RData")#
save(beta, file = "beta.true.RData")#
save(gamma_alpha, file = "gamma_alpha.true.RData")#
save(gamma_sigma2, file = "gamma_sigma2.true.RData")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(dataset, file = "dataset.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(knots, file = "knots.csv", row.names = FALSE, col.names = FALSE, sep = ",")
Generate synthetic hospital data:#
l1 = 2000#
m = 27#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(1, -1)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))#
l = sum(sizes)#
beta = 1:27#
X = matrix(sample(0:1, l*m, replace = TRUE), l, m)#
t_mean = alphas[rep(1:l1, sizes)] + X %*% beta#
nu = 8#
Z = t_mean + rnorm(l) * sqrt(nu/rchisq(l, nu))#
Y = ifelse(Z >= 0, 1, 0)#
dataset = data.frame(hosp_id = c(1:l1)[rep(1:l1, sizes)], Y, X, size = sizes[rep(1:l1, sizes)], 0, 0, size = sizes[rep(1:l1, sizes)])#
save(alphas, file = "alphas.true.RData")#
save(beta, file = "beta.true.RData")#
save(gamma_alpha, file = "gamma_alpha.true.RData")#
save(gamma_sigma2, file = "gamma_sigma2.true.RData")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(dataset, file = "dataset.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(knots, file = "knots.csv", row.names = FALSE, col.names = FALSE, sep = ",")
rpois(50)
rpois(1, 50)
rpois(1, 50)
rpois(1, 50)
rpois(1, 10)
rpois(1, 10)
beta = (1:27)*0.1#
X = matrix(sample(0:1, l*m, replace = TRUE), l, m)
beta
t_mean = alphas[rep(1:l1, sizes)] + X %*% beta#
nu = 8#
lambda = rgamma(l, nu/2, 2/nu)
lambda
length(lambda)
Generate synthetic hospital data:#
l1 = 2000#
m = 27#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(1, -1)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))#
l = sum(sizes)#
beta = (1:27)*0.1#
X = matrix(sample(0:1, l*m, replace = TRUE), l, m)#
t_mean = alphas[rep(1:l1, sizes)] + X %*% beta#
nu = 8#
lambda = rgamma(l, nu/2, 2/nu)#
Z = rnorm(l, t_mean, sqrt(1/lambda))#
Y = ifelse(Z >= 0, 1, 0)#
dataset = data.frame(hosp_id = c(1:l1)[rep(1:l1, sizes)], Y, X, size = sizes[rep(1:l1, sizes)], 0, 0, size = sizes[rep(1:l1, sizes)])#
save(alphas, file = "alphas.true.RData")#
save(beta, file = "beta.true.RData")#
save(gamma_alpha, file = "gamma_alpha.true.RData")#
save(gamma_sigma2, file = "gamma_sigma2.true.RData")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(dataset, file = "dataset.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(knots, file = "knots.csv", row.names = FALSE, col.names = FALSE, sep = ",")
beta
write.table(alphas, file = "alphas.csv", row.names = FALSE,  col.names = FALSE, sep = ",")
beta = seq(-10, 10, length = 27)
beta
setwd("/Users/ville/Desktop/SYNTHETIC")#
#
## Generate synthetic hospital data:#
l1 = 2000#
m = 27#
max.size = 100#
#
library(splines)#
sizes = sample(1:max.size, l1, replace = TRUE)#
sizes_scale = scale(sizes)[,1]#
knots = quantile(sizes_scale, c(0.25, 0.5, 0.75))#
CX = bs(sizes_scale, knots = knots, degree = 3, intercept = TRUE)#
CX_sigma = matrix(1, l1, 2)#
CX_sigma[,2] = sizes_scale#
#
gamma_alpha = c(-0.1, -0.2, -0.8, -0.9, -2, -3, -4)#
gamma_sigma2 = c(1, -1)#
alphas = rnorm(l1, CX %*% gamma_alpha, sqrt(exp(CX_sigma %*% gamma_sigma2)))#
l = sum(sizes)#
beta = seq(-4, 7, length = 27)#
X = matrix(sample(0:1, l*m, replace = TRUE), l, m)#
t_mean = alphas[rep(1:l1, sizes)] + X %*% beta#
nu = 8#
lambda = rgamma(l, nu/2, 2/nu)#
Z = rnorm(l, t_mean, sqrt(1/lambda))#
Y = ifelse(Z >= 0, 1, 0)#
dataset = data.frame(hosp_id = c(1:l1)[rep(1:l1, sizes)], Y, X, size = sizes[rep(1:l1, sizes)], 0, 0, size = sizes[rep(1:l1, sizes)])#
save(alphas, file = "alphas.true.RData")#
save(beta, file = "beta.true.RData")#
save(gamma_alpha, file = "gamma_alpha.true.RData")#
save(gamma_sigma2, file = "gamma_sigma2.true.RData")#
write.table(CX, file = "CX.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(dataset, file = "dataset.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(knots, file = "knots.csv", row.names = FALSE, col.names = FALSE, sep = ",")#
write.table(alphas, file = "alphas.csv", row.names = FALSE,  col.names = FALSE, sep = ",")
beta
dim(Data)
dim(dataset)
betas
beta
betas = read.csv(file.choose())
dim(betas)
plot(betas[,1])
plot(betas[,2])
plot(betas[,3])
plot(betas[,4])
plot(betas[,4])
plot(betas[,5])
plot(betas[,6])
plot(betas[,7])
colMeans(tail(betas, 500))
beta
T = 100#
Ks = c(20, 40, 60, 80, 100) ## Number of problems#
betas = c(0.5, 0.75, 1, 1/0.75, 1/0.5) ## Expected bias mean: same effect around 1.0#
sigma2s = c(0.5, 1.0, 1.5, 2.0, 2.5)#
load("/Users/ville/Desktop/Dynamic_Logit_Model/ExpertAnalysis/X.losses.RData")#
load("/Users/ville/Desktop/Dynamic_Logit_Model/ExpertAnalysis/b.losses.RData")#
#
#load("/Users/ville/Desktop/Dynamic_Logit_Model/ExpertAnalysis/X.log.losses.RData")#
#load("/Users/ville/Desktop/Dynamic_Logit_Model/ExpertAnalysis/b.log.losses.RData")#
#X.losses = X.log.losses#
#b.losses = b.log.losses#
#
######## XXXXXXXXX#
#
#betas.x = sapply(betas, function(x) exp(mean(log(x*c(0.5, 0.75, 1, 1/0.75, 1/0.5)))) )#
#betas.x = sapply(betas, function(x) mean(x*c(0.5, 0.75, 1, 1/0.75, 1/0.5)) )#
#betas.x = sapply(betas, function(x) sd(x*c(0.5, 0.75, 1, 1/0.75, 1/0.5)) )#
#betas.x = sapply(betas, function(x) mean(abs(x*c(0.5, 0.75, 1, 1/0.75, 1/0.5)-1)) )#
betas.x = betas#
wsize = 2#
hsize = 1.8#
font = 8#
#
setwd("/Users/ville/probability_aggregation/Figures/")#
#CairoPDF(file = "SyntheticSigma2.pdf", width = size, height = size, onefile = TRUE, family = "Times", pointsize = font)#
pdf("SyntheticSigma2.pdf", width = wsize, height = hsize, family = "Times", pointsize = font)#
par(mgp = c(1.5,.5,0), mar=c(2.4,2.8,0.8,0.2))#
BRI = apply(X.losses[[1]], 1, mean)#
LOG = apply(X.losses[[2]], 1, mean)#
#EWMLA = apply(X.losses[[3]], 1, mean)#
EWMA = apply(X.losses[[4]], 1, mean)#
#FULL = apply(X.losses[[3]], 1, mean)#
plot(BRI~sigma2s, type = "l", col = 1, lwd = 2, ylim = range(BRI, LOG, EWMA), xlab = expression(paste(sigma^2)), ylab = "Quadratic Loss", axes = FALSE)#
box()#
axis(1, at = round(sigma2s,1))#
axis(2)#
#axis(2, at = signif(seq(min(BRI,LOG), max(BRI,LOG), length = 5)[2:4], 2))#
lines(LOG~sigma2s, lty = 2, lwd = 2)#
#lines(EWMLA~sigma2s, lty = 2, lwd = 2, col = 2)#
lines(EWMA~sigma2s, lty = 3, lwd = 2)#
#lines(FULL~sigma2s, col = 3, lwd = 2)#
dev.off()#
#
setwd("/Users/ville/probability_aggregation/Figures/")#
#CairoPDF(file = "SyntheticBeta.pdf", width = size, height = size, onefile = TRUE, family = "Times", pointsize = font)#
pdf(file = "SyntheticBeta.pdf", width = wsize, height = hsize, onefile = TRUE, family = "Times", pointsize = font)#
par(mgp = c(1.5,.5,0), mar=c(2.4,2.8,0.8,0.2))#
BRI = apply(X.losses[[1]], 2, mean)#
LOG = apply(X.losses[[2]], 2, mean)#
#EWMLA = apply(X.losses[[3]], 2, mean)#
EWMA = apply(X.losses[[4]], 2, mean)#
#FULL = apply(X.losses[[3]], 2, mean)#
plot(BRI~betas.x, type = "l", col = 1, lwd = 2, ylim =range(BRI, LOG, EWMA), xlab = expression(paste(beta)), ylab = "Quadratic Loss", axes = FALSE)#
box()#
axis(1, at = round(betas.x,1))#
#axis(2, at = signif(seq(min(BRI,LOG), max(BRI,LOG), length = 5)[2:4], 2))#
axis(2)#
lines(LOG~betas.x, lty = 2, lwd = 2)#
#lines(EWMLA~betas.x, lty = 2, lwd = 2, col = 2)#
lines(EWMA~betas.x, lty = 3, lwd = 2)#
#lines(FULL~betas, col = 3, lwd = 2)#
dev.off()#
#
setwd("/Users/ville/probability_aggregation/Figures/")#
#CairoPDF(file = "SyntheticK.pdf", width = size, height = size, onefile = TRUE, family = "Times", pointsize = font)#
pdf(file = "SyntheticK.pdf", width = wsize, height = hsize, onefile = TRUE, family = "Times", pointsize = font)#
par(mgp = c(1.5,.5,0), mar=c(2.4,2.8,0.8,0.2))#
BRI = apply(X.losses[[1]], 3, mean)#
LOG = apply(X.losses[[2]], 3, mean)#
#EWMLA = apply(X.losses[[3]], 3, mean)#
EWMA = apply(X.losses[[4]], 3, mean)#
#FULL = apply(X.losses[[3]], 3, mean)#
plot(BRI~Ks, type = "l", col = 1, lwd = 2, ylim = range(BRI, LOG, EWMA), xlab = "K", ylab = "Quadratic Loss", axes = FALSE)#
box()#
axis(1, at = round(Ks, 1))#
axis(2)#
#axis(2, at = signif(seq(min(BRI,LOG), max(BRI,LOG), length = 5)[2:4], 2))#
lines(LOG~Ks, lwd = 2, lty = 2)#
#lines(EWMLA~Ks, lty = 2, lwd = 2, col = 2)#
lines(EWMA~Ks, lty = 3, lwd = 2)#
#lines(FULL~Ks, col = 3, lwd = 2)#
dev.off()#
######## BBBBBBBBBBBB#
setwd("/Users/ville/probability_aggregation/Figures/")#
pdf("SyntheticSigma2bias.pdf", width = wsize, height = hsize, onefile = TRUE, family = "Times", pointsize = font)#
par(mgp = c(1.5,.5,0), mar=c(2.4,2.8,0.8,0.2))#
BRI = apply(b.losses[[1]], 1, mean)#
LOG = apply(b.losses[[2]], 1, mean)#
#FULL = apply(b.losses[[3]], 1, mean)#
plot(BRI~sigma2s, type = "l", col = 1, lwd = 2, ylim = range(BRI, LOG), xlab = expression(paste(sigma^2)), ylab = "Quadratic Loss", axes = FALSE)#
box()#
axis(1, at = round(sigma2s, 1))#
#axis(2, at = signif(seq(min(BRI,LOG), max(BRI,LOG), length = 5)[2:4], 2))#
axis(2)#
lines(LOG~sigma2s, lwd = 2, lty = 2)#
#lines(FULL~sigma2s, col = 3, lwd = 2)#
dev.off()#
#
setwd("/Users/ville/probability_aggregation/Figures/")#
pdf("SyntheticBetabias.pdf", width = wsize, height = hsize, onefile = TRUE, family = "Times", pointsize = font)#
par(mgp = c(1.5,.5,0), mar=c(2.4,2.8,0.8,0.2))#
BRI = apply(b.losses[[1]], 2, mean)#
LOG = apply(b.losses[[2]], 2, mean)#
#FULL = apply(b.losses[[3]], 2, mean)#
plot(BRI~betas.x, type = "l", col = 1, lwd = 2, ylim = range(BRI, LOG), xlab = expression(paste(beta)), ylab = "Quadratic Loss", axes = FALSE)#
box()#
axis(1, at = round(betas.x, 1))#
axis(2)#
#axis(2, at = signif(seq(min(BRI,LOG), max(BRI,LOG), length = 5)[2:4], 2))#
lines(LOG~betas.x, lwd = 2, lty = 2)#
#lines(FULL~betas, col = 3, lwd = 2)#
dev.off()#
#
setwd("/Users/ville/probability_aggregation/Figures/")#
pdf("SyntheticKbias.pdf", width = wsize, height = hsize, onefile = TRUE, family = "Times", pointsize = font)#
par(mgp = c(1.5,.5,0), mar=c(2.4,2.8,0.8,0.2))#
BRI = apply(b.losses[[1]], 3, mean)#
LOG = apply(b.losses[[2]], 3, mean)#
#FULL = apply(b.losses[[3]], 3, mean)#
plot(BRI~Ks, type = "l", col = 1, lwd = 2, ylim = range(BRI, LOG), xlab = "K", ylab = "Quadratic Loss", axes = FALSE)#
box()#
axis(1, at = round(Ks, 1))#
axis(2)#
#axis(2, at = signif(seq(min(BRI,LOG), max(BRI,LOG), length = 5)[2:4], 2))#
lines(LOG~Ks,  lwd = 2, lty = 2)#
#lines(FULL~Ks, col = 3, lwd = 2)#
dev.off()
